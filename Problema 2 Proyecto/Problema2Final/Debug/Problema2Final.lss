
Problema2Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000018c  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000222  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007bf  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d6  00000000  00000000  00000a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000300  00000000  00000000  00001161  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000425  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000018dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  9e:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10Pulsadoresv>:
unsigned char contD2 = 0;

void Pulsadores() {
	static unsigned char Bpul = 1;
	
	if ((PINB & (1 << pul1)) && !(PINB & (1 << pul2)) || !(PINB & (1 << pul1)) && (PINB & (1 << pul2))) {
  a6:	1f 9b       	sbis	0x03, 7	; 3
  a8:	02 c0       	rjmp	.+4      	; 0xae <_Z10Pulsadoresv+0x8>
  aa:	1e 9b       	sbis	0x03, 6	; 3
  ac:	06 c0       	rjmp	.+12     	; 0xba <_Z10Pulsadoresv+0x14>
  ae:	1f 99       	sbic	0x03, 7	; 3
  b0:	06 c0       	rjmp	.+12     	; 0xbe <_Z10Pulsadoresv+0x18>
  b2:	1e 99       	sbic	0x03, 6	; 3
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <_Z10Pulsadoresv+0x1c>
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	05 c0       	rjmp	.+10     	; 0xc4 <_Z10Pulsadoresv+0x1e>
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <_Z10Pulsadoresv+0x1e>
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <_Z10Pulsadoresv+0x1e>
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	88 23       	and	r24, r24
  c6:	51 f0       	breq	.+20     	; 0xdc <_Z10Pulsadoresv+0x36>
		if (Bpul == 1) {
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	49 f4       	brne	.+18     	; 0xe2 <_Z10Pulsadoresv+0x3c>
			Bmodo = 2;
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Bmodo>
			Bpul = 0;
  d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  da:	08 95       	ret
		}
		} else {
		Bpul = 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  e2:	08 95       	ret

000000e4 <_Z5modo1v>:
	}
}

void modo1() {
	contD1++;
  e4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contD1>
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contD1>
	contD2++;
  ee:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
  f2:	9f 5f       	subi	r25, 0xFF	; 255
  f4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>
	if (contD1 == 80) {
  f8:	80 35       	cpi	r24, 0x50	; 80
  fa:	31 f4       	brne	.+12     	; 0x108 <_Z5modo1v+0x24>
		PORTB ^= (1 << D1);
  fc:	95 b1       	in	r25, 0x05	; 5
  fe:	80 e2       	ldi	r24, 0x20	; 32
 100:	89 27       	eor	r24, r25
 102:	85 b9       	out	0x05, r24	; 5
		contD1 = 0;
 104:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <contD1>
	}
	if (contD2 == 140) {
 108:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 10c:	8c 38       	cpi	r24, 0x8C	; 140
 10e:	31 f4       	brne	.+12     	; 0x11c <_Z5modo1v+0x38>
		PORTB ^= (1 << D2);
 110:	95 b1       	in	r25, 0x05	; 5
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	89 27       	eor	r24, r25
 116:	85 b9       	out	0x05, r24	; 5
		contD2 = 0;
 118:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 11c:	08 95       	ret

0000011e <_Z5modo2v>:
	}
}

void modo2() {
	contD1++;
 11e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contD1>
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contD1>
	contD2++;
 128:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 12c:	9f 5f       	subi	r25, 0xFF	; 255
 12e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>
	if (contD1 == 180) {
 132:	84 3b       	cpi	r24, 0xB4	; 180
 134:	31 f4       	brne	.+12     	; 0x142 <_Z5modo2v+0x24>
		PORTB ^= (1 << D1);
 136:	95 b1       	in	r25, 0x05	; 5
 138:	80 e2       	ldi	r24, 0x20	; 32
 13a:	89 27       	eor	r24, r25
 13c:	85 b9       	out	0x05, r24	; 5
		contD1 = 0;
 13e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <contD1>
	}
	if (contD2 == 40) {
 142:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 146:	88 32       	cpi	r24, 0x28	; 40
 148:	31 f4       	brne	.+12     	; 0x156 <_Z5modo2v+0x38>
		PORTB ^= (1 << D2);
 14a:	95 b1       	in	r25, 0x05	; 5
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	89 27       	eor	r24, r25
 150:	85 b9       	out	0x05, r24	; 5
		contD2 = 0;
 152:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 156:	08 95       	ret

00000158 <main>:
	}
}

int main(void) {
	DDRB |= (1 << D1) | (1 << D2);
 158:	84 b1       	in	r24, 0x04	; 4
 15a:	82 62       	ori	r24, 0x22	; 34
 15c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << pul1) | (1 << pul2); // Habilitar pull-up resistors
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	80 6c       	ori	r24, 0xC0	; 192
 162:	85 b9       	out	0x05, r24	; 5

	while (1) {
		Pulsadores();
 164:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10Pulsadoresv>

		if (Bmodo == 1) {
 168:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Bmodo>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	19 f4       	brne	.+6      	; 0x176 <main+0x1e>
			modo1();
 170:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z5modo1v>
 174:	02 c0       	rjmp	.+4      	; 0x17a <main+0x22>
			} else {
			modo2();
 176:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z5modo2v>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	81 ee       	ldi	r24, 0xE1	; 225
 17c:	94 e0       	ldi	r25, 0x04	; 4
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0x26>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x2c>
 184:	00 00       	nop
 186:	ee cf       	rjmp	.-36     	; 0x164 <main+0xc>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
