
Proyecto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077f  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d2  00000000  00000000  0000094b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026e  00000000  00000000  0000101d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f3  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  000016b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000171f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z9toggleLEDh>:
#define D1 PD6
#define D2 PD2
#define PUL PC4

void toggleLED(uint8_t ledPin) {
	PORTD ^= (1 << ledPin); // Cambia el estado del pin especificado
  80:	9b b1       	in	r25, 0x0b	; 11
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <_Z9toggleLEDh+0xc>
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	8a 95       	dec	r24
  8e:	e2 f7       	brpl	.-8      	; 0x88 <_Z9toggleLEDh+0x8>
  90:	29 27       	eor	r18, r25
  92:	2b b9       	out	0x0b, r18	; 11
  94:	08 95       	ret

00000096 <main>:
int main(void) {
	uint8_t cont = 0;
	uint8_t band = 0;

	// Configurar D1 y D2 como salidas y PUL como entrada
	DDRD |= (1 << D1) | (1 << D2); // Configura los pines de los LEDs como salidas
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	84 64       	ori	r24, 0x44	; 68
  9a:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~(1 << PUL); // Configura el pin del pulsador como entrada
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	8f 7e       	andi	r24, 0xEF	; 239
  a0:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PUL); // Habilitar la resistencia de pull-up en el pulsador
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	80 61       	ori	r24, 0x10	; 16
  a6:	88 b9       	out	0x08, r24	; 8
	PORTD ^= (1 << ledPin); // Cambia el estado del pin especificado
}

int main(void) {
	uint8_t cont = 0;
	uint8_t band = 0;
  a8:	d0 e0       	ldi	r29, 0x00	; 0
void toggleLED(uint8_t ledPin) {
	PORTD ^= (1 << ledPin); // Cambia el estado del pin especificado
}

int main(void) {
	uint8_t cont = 0;
  aa:	c0 e0       	ldi	r28, 0x00	; 0
	DDRC &= ~(1 << PUL); // Configura el pin del pulsador como entrada
	PORTC |= (1 << PUL); // Habilitar la resistencia de pull-up en el pulsador

	while (1) {
		
		cont++;
  ac:	cf 5f       	subi	r28, 0xFF	; 255
		if (cont == 140) { // Conmuta D1 cada 0.7 segundos
  ae:	cc 38       	cpi	r28, 0x8C	; 140
  b0:	21 f4       	brne	.+8      	; 0xba <main+0x24>
			toggleLED(D1);
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	0e 94 40 00 	call	0x80	; 0x80 <_Z9toggleLEDh>
			cont = 0;
  b8:	c0 e0       	ldi	r28, 0x00	; 0
		}

		// Leer el estado del pulsador
		if (!(PINC & (1 << PUL))) { // Si el pulsador está presionado (asumiendo configuración de pull-up)
  ba:	34 99       	sbic	0x06, 4	; 6
  bc:	06 c0       	rjmp	.+12     	; 0xca <main+0x34>
			if (band == 0) {
  be:	d1 11       	cpse	r29, r1
  c0:	04 c0       	rjmp	.+8      	; 0xca <main+0x34>
				toggleLED(D2); // Conmutar D2
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 40 00 	call	0x80	; 0x80 <_Z9toggleLEDh>
				band = 1;
  c8:	d1 e0       	ldi	r29, 0x01	; 1
			}
		}
		if ((PINC & (1 << PUL))) {
  ca:	34 99       	sbic	0x06, 4	; 6
			band = 0; // Restablecer band cuando el pulsador no está presionado
  cc:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x3c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x42>
  d8:	00 00       	nop
  da:	e8 cf       	rjmp	.-48     	; 0xac <main+0x16>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
