
Proyecto problema 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f3  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ff  00000000  00000000  00000a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000284  00000000  00000000  0000114e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000418  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008b  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6d 00 	call	0xda	; 0xda <main>
  8e:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z8PulsadorPKhRhS1_>:

#define Pul (1 << PB0)
#define op 0

void Pulsador(const uint8_t* Tabla, uint8_t& Bpul, uint8_t& Contador) {
	if (!(PINB & Pul) && Bpul == 1) {
  96:	18 99       	sbic	0x03, 0	; 3
  98:	06 c0       	rjmp	.+12     	; 0xa6 <_Z8PulsadorPKhRhS1_+0x10>
  9a:	fb 01       	movw	r30, r22
  9c:	20 81       	ld	r18, Z
  9e:	21 30       	cpi	r18, 0x01	; 1
  a0:	21 f0       	breq	.+8      	; 0xaa <_Z8PulsadorPKhRhS1_+0x14>
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	03 c0       	rjmp	.+6      	; 0xac <_Z8PulsadorPKhRhS1_+0x16>
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	01 c0       	rjmp	.+2      	; 0xac <_Z8PulsadorPKhRhS1_+0x16>
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	22 23       	and	r18, r18
  ae:	89 f0       	breq	.+34     	; 0xd2 <_Z8PulsadorPKhRhS1_+0x3c>
		Contador++;
  b0:	fa 01       	movw	r30, r20
  b2:	20 81       	ld	r18, Z
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	20 83       	st	Z, r18
		if (Contador == 16) {
  b8:	20 31       	cpi	r18, 0x10	; 16
  ba:	09 f4       	brne	.+2      	; 0xbe <_Z8PulsadorPKhRhS1_+0x28>
			Contador = 0;
  bc:	10 82       	st	Z, r1
		}
		Bpul = 0;
  be:	fb 01       	movw	r30, r22
  c0:	10 82       	st	Z, r1
		PORTB = Tabla[Contador];
  c2:	fa 01       	movw	r30, r20
  c4:	20 81       	ld	r18, Z
  c6:	fc 01       	movw	r30, r24
  c8:	e2 0f       	add	r30, r18
  ca:	f1 1d       	adc	r31, r1
  cc:	80 81       	ld	r24, Z
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	08 95       	ret
		} else {
		Bpul = 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	fb 01       	movw	r30, r22
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <main>:
	}
}

int main(void) {
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	62 97       	sbiw	r28, 0x12	; 18
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
	DDRB &= ~(0x01); // Configurar Pin B0 como entrada (Pulsador)
  ee:	84 b1       	in	r24, 0x04	; 4
  f0:	8e 7f       	andi	r24, 0xFE	; 254
  f2:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(0x01); // Habilitar resistencia de pull-down en el pin PB0
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	8e 7f       	andi	r24, 0xFE	; 254
  f8:	85 b9       	out	0x05, r24	; 5
	DDRB |= 0xFE;   // Pines PB1-PB7 como salidas
  fa:	84 b1       	in	r24, 0x04	; 4
  fc:	8e 6f       	ori	r24, 0xFE	; 254
  fe:	84 b9       	out	0x04, r24	; 4
	uint8_t Contador = 0;
 100:	19 82       	std	Y+1, r1	; 0x01
		0b01111100, // B
		0b00111001, // C
		0b01011110, // D
		0b01111001, // E
		0b01110001  // F
	};
 102:	80 e1       	ldi	r24, 0x10	; 16
 104:	e0 e0       	ldi	r30, 0x00	; 0
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	de 01       	movw	r26, r28
 10a:	12 96       	adiw	r26, 0x02	; 2
 10c:	01 90       	ld	r0, Z+
 10e:	0d 92       	st	X+, r0
 110:	8a 95       	dec	r24
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x32>
	uint8_t Bpul = 1;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	8a 8b       	std	Y+18, r24	; 0x12

	while (1) {
		Pulsador(Tabla, Bpul, Contador);
 118:	ae 01       	movw	r20, r28
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	be 01       	movw	r22, r28
 120:	6e 5e       	subi	r22, 0xEE	; 238
 122:	7f 4f       	sbci	r23, 0xFF	; 255
 124:	ce 01       	movw	r24, r28
 126:	02 96       	adiw	r24, 0x02	; 2
 128:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8PulsadorPKhRhS1_>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	8f e1       	ldi	r24, 0x1F	; 31
 12e:	9e e4       	ldi	r25, 0x4E	; 78
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x56>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x5c>
 136:	00 00       	nop
 138:	ef cf       	rjmp	.-34     	; 0x118 <main+0x3e>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
